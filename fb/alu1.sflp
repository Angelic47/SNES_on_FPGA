
// ALU 8 bit

%i "cpa4_bcd.h"

circuit alu1
{
	input a<8>, b<8>, cin, bcd;
	output dout<8>, cout, n, v, z;
	instrin add(a, b, cin, bcd);
	instrin sub(a, b, cin, bcd);
	instrin and1(a, b);
	instrin or1(a, b);
	instrin eor1(a, b);
	instrin ror1(a, cin);
	instrin rol1(a, cin);
	instrin lsr1(a);
	instrin asl1(a);

	sel cry<3>;
	cpa4_bcd cpa_l, cpa_h;
	instrself req, zn, zf;

	cry = (cpa_h.gout
	    | (cpa_h.pout & cpa_l.gout)
	    | (cpa_h.pout & cpa_l.pout & cin))
	   || (cpa_l.gout
	    | (cpa_l.pout & cin))
	   || cin;

	instruct zf z = (dout==0x00);
	instruct zn par{
		zf();
		n = dout<7>;
	}
	instruct req par{
		v = cpa_h.v;
	}
	instruct add par{
		cpa_h.add(a<7:4>, b<7:4>, cry<1>, bcd);
		cpa_l.add(a<3:0>, b<3:0>, cry<0>, bcd);
		dout = cpa_h.out1 || cpa_l.out1;
		cout = cry<2>;
		zf();
		n = dout<7> | (bcd & cry<2>);
		req();
	}
	instruct sub par{
		cpa_h.sub(a<7:4>, b<7:4>, cry<1>, bcd);
		cpa_l.sub(a<3:0>, b<3:0>, cry<0>, bcd);
		dout = cpa_h.out1 || cpa_l.out1;
		cout = cry<2>;
		zf();
		n = dout<7> | (bcd & ^cry<2>);
		req();
	}
	instruct and1 par{ dout = a & b; zn(); }
	instruct or1  par{ dout = a | b; zn(); }
	instruct eor1 par{ dout = a @ b; zn(); }
	instruct ror1 par{
		dout = cin || a<7:1>;
		cout = a<0>;
		zn();
	}
	instruct rol1 par{
		dout = a<6:0> || cin;
		cout = a<7>;
		zn();
	}
	instruct lsr1 par{
		dout = 0b0 || a<7:1>;
		cout = a<0>;
		zn();
	}
	instruct asl1 par{
		dout = a<6:0> || 0b0;
		cout = a<7>;
		zn();
	}
}
